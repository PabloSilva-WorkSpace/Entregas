
GPIO_REGISTRADORES_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000824  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00400824  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000094  20000438  00400c5c  00010438  2**2
                  ALLOC
  3 .stack        00003004  200004cc  00400cf0  00010438  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010462  2**0
                  CONTENTS, READONLY
  6 .debug_info   00006185  00000000  00000000  000104bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a0  00000000  00000000  00016642  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002334  00000000  00000000  000176e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000548  00000000  00000000  00019a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004a8  00000000  00000000  00019f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000057ea  00000000  00000000  0001a406  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006cd0  00000000  00000000  0001fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00050abc  00000000  00000000  000268c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000bb8  00000000  00000000  0007737c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200034d0 	.word	0x200034d0
  400004:	00400329 	.word	0x00400329
  400008:	00400325 	.word	0x00400325
  40000c:	00400325 	.word	0x00400325
  400010:	00400325 	.word	0x00400325
  400014:	00400325 	.word	0x00400325
  400018:	00400325 	.word	0x00400325
	...
  40002c:	00400325 	.word	0x00400325
  400030:	00400325 	.word	0x00400325
  400034:	00000000 	.word	0x00000000
  400038:	00400325 	.word	0x00400325
  40003c:	00400325 	.word	0x00400325
  400040:	00400325 	.word	0x00400325
  400044:	00400325 	.word	0x00400325
  400048:	00400325 	.word	0x00400325
  40004c:	00400325 	.word	0x00400325
  400050:	00400325 	.word	0x00400325
  400054:	00400325 	.word	0x00400325
  400058:	00400325 	.word	0x00400325
  40005c:	00400325 	.word	0x00400325
  400060:	00400325 	.word	0x00400325
  400064:	00400325 	.word	0x00400325
  400068:	00000000 	.word	0x00000000
  40006c:	004001fd 	.word	0x004001fd
  400070:	00400211 	.word	0x00400211
  400074:	00400225 	.word	0x00400225
  400078:	00400325 	.word	0x00400325
  40007c:	00400325 	.word	0x00400325
	...
  400088:	00400325 	.word	0x00400325
  40008c:	00400325 	.word	0x00400325
  400090:	00400325 	.word	0x00400325
  400094:	00400325 	.word	0x00400325
  400098:	00400325 	.word	0x00400325
  40009c:	00400325 	.word	0x00400325
  4000a0:	00400325 	.word	0x00400325
  4000a4:	00400325 	.word	0x00400325
  4000a8:	00400325 	.word	0x00400325
  4000ac:	00400325 	.word	0x00400325
  4000b0:	00400325 	.word	0x00400325
  4000b4:	00400325 	.word	0x00400325
  4000b8:	00400325 	.word	0x00400325
  4000bc:	00400325 	.word	0x00400325
  4000c0:	00400325 	.word	0x00400325
  4000c4:	00400325 	.word	0x00400325
  4000c8:	00400325 	.word	0x00400325

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000438 	.word	0x20000438
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00400824 	.word	0x00400824

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00400824 	.word	0x00400824
  40011c:	2000043c 	.word	0x2000043c
  400120:	00400824 	.word	0x00400824
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	2000      	movs	r0, #0
  400132:	213e      	movs	r1, #62	; 0x3e
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	004004ed 	.word	0x004004ed
  40016c:	004002a1 	.word	0x004002a1
  400170:	004002f5 	.word	0x004002f5
  400174:	00400305 	.word	0x00400305
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	00400315 	.word	0x00400315
  400184:	00400239 	.word	0x00400239
  400188:	004003d9 	.word	0x004003d9

0040018c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40018c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40018e:	4770      	bx	lr

00400190 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400190:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400192:	4770      	bx	lr

00400194 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400198:	4681      	mov	r9, r0
  40019a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40019c:	4b12      	ldr	r3, [pc, #72]	; (4001e8 <pio_handler_process+0x54>)
  40019e:	4798      	blx	r3
  4001a0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4001a2:	4648      	mov	r0, r9
  4001a4:	4b11      	ldr	r3, [pc, #68]	; (4001ec <pio_handler_process+0x58>)
  4001a6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4001a8:	4005      	ands	r5, r0
  4001aa:	d013      	beq.n	4001d4 <pio_handler_process+0x40>
  4001ac:	4c10      	ldr	r4, [pc, #64]	; (4001f0 <pio_handler_process+0x5c>)
  4001ae:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4001b2:	6823      	ldr	r3, [r4, #0]
  4001b4:	4543      	cmp	r3, r8
  4001b6:	d108      	bne.n	4001ca <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4001b8:	6861      	ldr	r1, [r4, #4]
  4001ba:	4229      	tst	r1, r5
  4001bc:	d005      	beq.n	4001ca <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4001be:	68e3      	ldr	r3, [r4, #12]
  4001c0:	4640      	mov	r0, r8
  4001c2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4001c4:	6863      	ldr	r3, [r4, #4]
  4001c6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001ca:	42b4      	cmp	r4, r6
  4001cc:	d002      	beq.n	4001d4 <pio_handler_process+0x40>
  4001ce:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4001d0:	2d00      	cmp	r5, #0
  4001d2:	d1ee      	bne.n	4001b2 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4001d4:	4b07      	ldr	r3, [pc, #28]	; (4001f4 <pio_handler_process+0x60>)
  4001d6:	681b      	ldr	r3, [r3, #0]
  4001d8:	b123      	cbz	r3, 4001e4 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  4001da:	4b07      	ldr	r3, [pc, #28]	; (4001f8 <pio_handler_process+0x64>)
  4001dc:	681b      	ldr	r3, [r3, #0]
  4001de:	b10b      	cbz	r3, 4001e4 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  4001e0:	4648      	mov	r0, r9
  4001e2:	4798      	blx	r3
  4001e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4001e8:	0040018d 	.word	0x0040018d
  4001ec:	00400191 	.word	0x00400191
  4001f0:	20000458 	.word	0x20000458
  4001f4:	200004c8 	.word	0x200004c8
  4001f8:	20000454 	.word	0x20000454

004001fc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4001fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4001fe:	4802      	ldr	r0, [pc, #8]	; (400208 <PIOA_Handler+0xc>)
  400200:	210b      	movs	r1, #11
  400202:	4b02      	ldr	r3, [pc, #8]	; (40020c <PIOA_Handler+0x10>)
  400204:	4798      	blx	r3
  400206:	bd08      	pop	{r3, pc}
  400208:	400e0e00 	.word	0x400e0e00
  40020c:	00400195 	.word	0x00400195

00400210 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400210:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400212:	4802      	ldr	r0, [pc, #8]	; (40021c <PIOB_Handler+0xc>)
  400214:	210c      	movs	r1, #12
  400216:	4b02      	ldr	r3, [pc, #8]	; (400220 <PIOB_Handler+0x10>)
  400218:	4798      	blx	r3
  40021a:	bd08      	pop	{r3, pc}
  40021c:	400e1000 	.word	0x400e1000
  400220:	00400195 	.word	0x00400195

00400224 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400224:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400226:	4802      	ldr	r0, [pc, #8]	; (400230 <PIOC_Handler+0xc>)
  400228:	210d      	movs	r1, #13
  40022a:	4b02      	ldr	r3, [pc, #8]	; (400234 <PIOC_Handler+0x10>)
  40022c:	4798      	blx	r3
  40022e:	bd08      	pop	{r3, pc}
  400230:	400e1200 	.word	0x400e1200
  400234:	00400195 	.word	0x00400195

00400238 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400238:	4a18      	ldr	r2, [pc, #96]	; (40029c <pmc_switch_mck_to_pllack+0x64>)
  40023a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40023c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400240:	4318      	orrs	r0, r3
  400242:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400244:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400246:	f013 0f08 	tst.w	r3, #8
  40024a:	d003      	beq.n	400254 <pmc_switch_mck_to_pllack+0x1c>
  40024c:	e009      	b.n	400262 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40024e:	3b01      	subs	r3, #1
  400250:	d103      	bne.n	40025a <pmc_switch_mck_to_pllack+0x22>
  400252:	e01e      	b.n	400292 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400254:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400258:	4910      	ldr	r1, [pc, #64]	; (40029c <pmc_switch_mck_to_pllack+0x64>)
  40025a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40025c:	f012 0f08 	tst.w	r2, #8
  400260:	d0f5      	beq.n	40024e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400262:	4a0e      	ldr	r2, [pc, #56]	; (40029c <pmc_switch_mck_to_pllack+0x64>)
  400264:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400266:	f023 0303 	bic.w	r3, r3, #3
  40026a:	f043 0302 	orr.w	r3, r3, #2
  40026e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400270:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400272:	f010 0008 	ands.w	r0, r0, #8
  400276:	d004      	beq.n	400282 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400278:	2000      	movs	r0, #0
  40027a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40027c:	3b01      	subs	r3, #1
  40027e:	d103      	bne.n	400288 <pmc_switch_mck_to_pllack+0x50>
  400280:	e009      	b.n	400296 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400282:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400286:	4905      	ldr	r1, [pc, #20]	; (40029c <pmc_switch_mck_to_pllack+0x64>)
  400288:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40028a:	f012 0f08 	tst.w	r2, #8
  40028e:	d0f5      	beq.n	40027c <pmc_switch_mck_to_pllack+0x44>
  400290:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400292:	2001      	movs	r0, #1
  400294:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400296:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400298:	4770      	bx	lr
  40029a:	bf00      	nop
  40029c:	400e0400 	.word	0x400e0400

004002a0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4002a0:	b138      	cbz	r0, 4002b2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4002a2:	4911      	ldr	r1, [pc, #68]	; (4002e8 <pmc_switch_mainck_to_xtal+0x48>)
  4002a4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4002a6:	4a11      	ldr	r2, [pc, #68]	; (4002ec <pmc_switch_mainck_to_xtal+0x4c>)
  4002a8:	401a      	ands	r2, r3
  4002aa:	4b11      	ldr	r3, [pc, #68]	; (4002f0 <pmc_switch_mainck_to_xtal+0x50>)
  4002ac:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4002ae:	620b      	str	r3, [r1, #32]
  4002b0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4002b2:	4a0d      	ldr	r2, [pc, #52]	; (4002e8 <pmc_switch_mainck_to_xtal+0x48>)
  4002b4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4002b6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4002ba:	f023 0303 	bic.w	r3, r3, #3
  4002be:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4002c2:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4002c6:	0209      	lsls	r1, r1, #8
  4002c8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4002ca:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4002cc:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4002ce:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4002d0:	f013 0f01 	tst.w	r3, #1
  4002d4:	d0fb      	beq.n	4002ce <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4002d6:	4a04      	ldr	r2, [pc, #16]	; (4002e8 <pmc_switch_mainck_to_xtal+0x48>)
  4002d8:	6a13      	ldr	r3, [r2, #32]
  4002da:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4002de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4002e2:	6213      	str	r3, [r2, #32]
  4002e4:	4770      	bx	lr
  4002e6:	bf00      	nop
  4002e8:	400e0400 	.word	0x400e0400
  4002ec:	fec8fffc 	.word	0xfec8fffc
  4002f0:	01370002 	.word	0x01370002

004002f4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4002f4:	4b02      	ldr	r3, [pc, #8]	; (400300 <pmc_osc_is_ready_mainck+0xc>)
  4002f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4002f8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4002fc:	4770      	bx	lr
  4002fe:	bf00      	nop
  400300:	400e0400 	.word	0x400e0400

00400304 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400304:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400308:	4b01      	ldr	r3, [pc, #4]	; (400310 <pmc_disable_pllack+0xc>)
  40030a:	629a      	str	r2, [r3, #40]	; 0x28
  40030c:	4770      	bx	lr
  40030e:	bf00      	nop
  400310:	400e0400 	.word	0x400e0400

00400314 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400314:	4b02      	ldr	r3, [pc, #8]	; (400320 <pmc_is_locked_pllack+0xc>)
  400316:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400318:	f000 0002 	and.w	r0, r0, #2
  40031c:	4770      	bx	lr
  40031e:	bf00      	nop
  400320:	400e0400 	.word	0x400e0400

00400324 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  400324:	e7fe      	b.n	400324 <Dummy_Handler>
  400326:	bf00      	nop

00400328 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400328:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  40032a:	4b20      	ldr	r3, [pc, #128]	; (4003ac <Reset_Handler+0x84>)
  40032c:	4a20      	ldr	r2, [pc, #128]	; (4003b0 <Reset_Handler+0x88>)
  40032e:	429a      	cmp	r2, r3
  400330:	d913      	bls.n	40035a <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  400332:	4b20      	ldr	r3, [pc, #128]	; (4003b4 <Reset_Handler+0x8c>)
  400334:	4a1d      	ldr	r2, [pc, #116]	; (4003ac <Reset_Handler+0x84>)
  400336:	429a      	cmp	r2, r3
  400338:	d21f      	bcs.n	40037a <Reset_Handler+0x52>
  40033a:	4611      	mov	r1, r2
  40033c:	3204      	adds	r2, #4
  40033e:	3303      	adds	r3, #3
  400340:	1a9b      	subs	r3, r3, r2
  400342:	f023 0303 	bic.w	r3, r3, #3
  400346:	3304      	adds	r3, #4
  400348:	4a19      	ldr	r2, [pc, #100]	; (4003b0 <Reset_Handler+0x88>)
  40034a:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  40034c:	f852 0b04 	ldr.w	r0, [r2], #4
  400350:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400354:	429a      	cmp	r2, r3
  400356:	d1f9      	bne.n	40034c <Reset_Handler+0x24>
  400358:	e00f      	b.n	40037a <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40035a:	4b14      	ldr	r3, [pc, #80]	; (4003ac <Reset_Handler+0x84>)
  40035c:	4a14      	ldr	r2, [pc, #80]	; (4003b0 <Reset_Handler+0x88>)
  40035e:	429a      	cmp	r2, r3
  400360:	d20b      	bcs.n	40037a <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400362:	4b14      	ldr	r3, [pc, #80]	; (4003b4 <Reset_Handler+0x8c>)
  400364:	4a11      	ldr	r2, [pc, #68]	; (4003ac <Reset_Handler+0x84>)
  400366:	1a9a      	subs	r2, r3, r2
  400368:	4813      	ldr	r0, [pc, #76]	; (4003b8 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40036a:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40036c:	b12a      	cbz	r2, 40037a <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  40036e:	f851 2904 	ldr.w	r2, [r1], #-4
  400372:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400376:	4281      	cmp	r1, r0
  400378:	d1f9      	bne.n	40036e <Reset_Handler+0x46>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40037a:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40037c:	4b0f      	ldr	r3, [pc, #60]	; (4003bc <Reset_Handler+0x94>)
  40037e:	4a10      	ldr	r2, [pc, #64]	; (4003c0 <Reset_Handler+0x98>)
  400380:	429a      	cmp	r2, r3
  400382:	d20b      	bcs.n	40039c <Reset_Handler+0x74>
  400384:	1d13      	adds	r3, r2, #4
  400386:	4a0f      	ldr	r2, [pc, #60]	; (4003c4 <Reset_Handler+0x9c>)
  400388:	1ad2      	subs	r2, r2, r3
  40038a:	f022 0203 	bic.w	r2, r2, #3
  40038e:	441a      	add	r2, r3
  400390:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400392:	2100      	movs	r1, #0
  400394:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400398:	4293      	cmp	r3, r2
  40039a:	d1fb      	bne.n	400394 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  40039c:	4b0a      	ldr	r3, [pc, #40]	; (4003c8 <Reset_Handler+0xa0>)
  40039e:	4a0b      	ldr	r2, [pc, #44]	; (4003cc <Reset_Handler+0xa4>)
  4003a0:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  4003a2:	4b0b      	ldr	r3, [pc, #44]	; (4003d0 <Reset_Handler+0xa8>)
  4003a4:	4798      	blx	r3

	/* Branch to main function */
	main();
  4003a6:	4b0b      	ldr	r3, [pc, #44]	; (4003d4 <Reset_Handler+0xac>)
  4003a8:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  4003aa:	e7fe      	b.n	4003aa <Reset_Handler+0x82>
  4003ac:	20000000 	.word	0x20000000
  4003b0:	00400824 	.word	0x00400824
  4003b4:	20000438 	.word	0x20000438
  4003b8:	00400820 	.word	0x00400820
  4003bc:	200004cc 	.word	0x200004cc
  4003c0:	20000438 	.word	0x20000438
  4003c4:	200004cf 	.word	0x200004cf
  4003c8:	e000ed00 	.word	0xe000ed00
  4003cc:	00400000 	.word	0x00400000
  4003d0:	004006b9 	.word	0x004006b9
  4003d4:	004005f5 	.word	0x004005f5

004003d8 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  4003d8:	4b3d      	ldr	r3, [pc, #244]	; (4004d0 <SystemCoreClockUpdate+0xf8>)
  4003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4003dc:	f003 0303 	and.w	r3, r3, #3
  4003e0:	2b03      	cmp	r3, #3
  4003e2:	d85d      	bhi.n	4004a0 <SystemCoreClockUpdate+0xc8>
  4003e4:	e8df f003 	tbb	[pc, r3]
  4003e8:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4003ec:	4b39      	ldr	r3, [pc, #228]	; (4004d4 <SystemCoreClockUpdate+0xfc>)
  4003ee:	695b      	ldr	r3, [r3, #20]
  4003f0:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4003f4:	bf14      	ite	ne
  4003f6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4003fa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4003fe:	4b36      	ldr	r3, [pc, #216]	; (4004d8 <SystemCoreClockUpdate+0x100>)
  400400:	601a      	str	r2, [r3, #0]
  400402:	e04d      	b.n	4004a0 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400404:	4b32      	ldr	r3, [pc, #200]	; (4004d0 <SystemCoreClockUpdate+0xf8>)
  400406:	6a1b      	ldr	r3, [r3, #32]
  400408:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40040c:	d003      	beq.n	400416 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  40040e:	4a33      	ldr	r2, [pc, #204]	; (4004dc <SystemCoreClockUpdate+0x104>)
  400410:	4b31      	ldr	r3, [pc, #196]	; (4004d8 <SystemCoreClockUpdate+0x100>)
  400412:	601a      	str	r2, [r3, #0]
  400414:	e044      	b.n	4004a0 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400416:	4a32      	ldr	r2, [pc, #200]	; (4004e0 <SystemCoreClockUpdate+0x108>)
  400418:	4b2f      	ldr	r3, [pc, #188]	; (4004d8 <SystemCoreClockUpdate+0x100>)
  40041a:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40041c:	4b2c      	ldr	r3, [pc, #176]	; (4004d0 <SystemCoreClockUpdate+0xf8>)
  40041e:	6a1b      	ldr	r3, [r3, #32]
  400420:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400424:	2b10      	cmp	r3, #16
  400426:	d002      	beq.n	40042e <SystemCoreClockUpdate+0x56>
  400428:	2b20      	cmp	r3, #32
  40042a:	d004      	beq.n	400436 <SystemCoreClockUpdate+0x5e>
  40042c:	e038      	b.n	4004a0 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  40042e:	4a2d      	ldr	r2, [pc, #180]	; (4004e4 <SystemCoreClockUpdate+0x10c>)
  400430:	4b29      	ldr	r3, [pc, #164]	; (4004d8 <SystemCoreClockUpdate+0x100>)
  400432:	601a      	str	r2, [r3, #0]
			break;
  400434:	e034      	b.n	4004a0 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400436:	4a29      	ldr	r2, [pc, #164]	; (4004dc <SystemCoreClockUpdate+0x104>)
  400438:	4b27      	ldr	r3, [pc, #156]	; (4004d8 <SystemCoreClockUpdate+0x100>)
  40043a:	601a      	str	r2, [r3, #0]
			break;
  40043c:	e030      	b.n	4004a0 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  40043e:	4b24      	ldr	r3, [pc, #144]	; (4004d0 <SystemCoreClockUpdate+0xf8>)
  400440:	6a1b      	ldr	r3, [r3, #32]
  400442:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400446:	d003      	beq.n	400450 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400448:	4a24      	ldr	r2, [pc, #144]	; (4004dc <SystemCoreClockUpdate+0x104>)
  40044a:	4b23      	ldr	r3, [pc, #140]	; (4004d8 <SystemCoreClockUpdate+0x100>)
  40044c:	601a      	str	r2, [r3, #0]
  40044e:	e012      	b.n	400476 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400450:	4a23      	ldr	r2, [pc, #140]	; (4004e0 <SystemCoreClockUpdate+0x108>)
  400452:	4b21      	ldr	r3, [pc, #132]	; (4004d8 <SystemCoreClockUpdate+0x100>)
  400454:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400456:	4b1e      	ldr	r3, [pc, #120]	; (4004d0 <SystemCoreClockUpdate+0xf8>)
  400458:	6a1b      	ldr	r3, [r3, #32]
  40045a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40045e:	2b10      	cmp	r3, #16
  400460:	d002      	beq.n	400468 <SystemCoreClockUpdate+0x90>
  400462:	2b20      	cmp	r3, #32
  400464:	d004      	beq.n	400470 <SystemCoreClockUpdate+0x98>
  400466:	e006      	b.n	400476 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400468:	4a1e      	ldr	r2, [pc, #120]	; (4004e4 <SystemCoreClockUpdate+0x10c>)
  40046a:	4b1b      	ldr	r3, [pc, #108]	; (4004d8 <SystemCoreClockUpdate+0x100>)
  40046c:	601a      	str	r2, [r3, #0]
					break;
  40046e:	e002      	b.n	400476 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400470:	4a1a      	ldr	r2, [pc, #104]	; (4004dc <SystemCoreClockUpdate+0x104>)
  400472:	4b19      	ldr	r3, [pc, #100]	; (4004d8 <SystemCoreClockUpdate+0x100>)
  400474:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400476:	4b16      	ldr	r3, [pc, #88]	; (4004d0 <SystemCoreClockUpdate+0xf8>)
  400478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40047a:	f003 0303 	and.w	r3, r3, #3
  40047e:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400480:	4a13      	ldr	r2, [pc, #76]	; (4004d0 <SystemCoreClockUpdate+0xf8>)
  400482:	bf07      	ittee	eq
  400484:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400486:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400488:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40048a:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  40048c:	4812      	ldr	r0, [pc, #72]	; (4004d8 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  40048e:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400492:	6803      	ldr	r3, [r0, #0]
  400494:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  400498:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40049a:	fbb3 f3f2 	udiv	r3, r3, r2
  40049e:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  4004a0:	4b0b      	ldr	r3, [pc, #44]	; (4004d0 <SystemCoreClockUpdate+0xf8>)
  4004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4004a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4004a8:	2b70      	cmp	r3, #112	; 0x70
  4004aa:	d107      	bne.n	4004bc <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  4004ac:	4a0a      	ldr	r2, [pc, #40]	; (4004d8 <SystemCoreClockUpdate+0x100>)
  4004ae:	6813      	ldr	r3, [r2, #0]
  4004b0:	490d      	ldr	r1, [pc, #52]	; (4004e8 <SystemCoreClockUpdate+0x110>)
  4004b2:	fba1 1303 	umull	r1, r3, r1, r3
  4004b6:	085b      	lsrs	r3, r3, #1
  4004b8:	6013      	str	r3, [r2, #0]
  4004ba:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4004bc:	4b04      	ldr	r3, [pc, #16]	; (4004d0 <SystemCoreClockUpdate+0xf8>)
  4004be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4004c0:	4905      	ldr	r1, [pc, #20]	; (4004d8 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4004c2:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4004c6:	680b      	ldr	r3, [r1, #0]
  4004c8:	40d3      	lsrs	r3, r2
  4004ca:	600b      	str	r3, [r1, #0]
  4004cc:	4770      	bx	lr
  4004ce:	bf00      	nop
  4004d0:	400e0400 	.word	0x400e0400
  4004d4:	400e1410 	.word	0x400e1410
  4004d8:	2000000c 	.word	0x2000000c
  4004dc:	00b71b00 	.word	0x00b71b00
  4004e0:	003d0900 	.word	0x003d0900
  4004e4:	007a1200 	.word	0x007a1200
  4004e8:	aaaaaaab 	.word	0xaaaaaaab

004004ec <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4004ec:	4b1a      	ldr	r3, [pc, #104]	; (400558 <system_init_flash+0x6c>)
  4004ee:	4298      	cmp	r0, r3
  4004f0:	d807      	bhi.n	400502 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4004f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  4004f6:	4a19      	ldr	r2, [pc, #100]	; (40055c <system_init_flash+0x70>)
  4004f8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4004fa:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4004fe:	6013      	str	r3, [r2, #0]
  400500:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400502:	4b17      	ldr	r3, [pc, #92]	; (400560 <system_init_flash+0x74>)
  400504:	4298      	cmp	r0, r3
  400506:	d806      	bhi.n	400516 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400508:	4b16      	ldr	r3, [pc, #88]	; (400564 <system_init_flash+0x78>)
  40050a:	4a14      	ldr	r2, [pc, #80]	; (40055c <system_init_flash+0x70>)
  40050c:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40050e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400512:	6013      	str	r3, [r2, #0]
  400514:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400516:	4b14      	ldr	r3, [pc, #80]	; (400568 <system_init_flash+0x7c>)
  400518:	4298      	cmp	r0, r3
  40051a:	d806      	bhi.n	40052a <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40051c:	4b13      	ldr	r3, [pc, #76]	; (40056c <system_init_flash+0x80>)
  40051e:	4a0f      	ldr	r2, [pc, #60]	; (40055c <system_init_flash+0x70>)
  400520:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400522:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400526:	6013      	str	r3, [r2, #0]
  400528:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  40052a:	4b11      	ldr	r3, [pc, #68]	; (400570 <system_init_flash+0x84>)
  40052c:	4298      	cmp	r0, r3
  40052e:	d806      	bhi.n	40053e <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400530:	4b10      	ldr	r3, [pc, #64]	; (400574 <system_init_flash+0x88>)
  400532:	4a0a      	ldr	r2, [pc, #40]	; (40055c <system_init_flash+0x70>)
  400534:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400536:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40053a:	6013      	str	r3, [r2, #0]
  40053c:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40053e:	4b0e      	ldr	r3, [pc, #56]	; (400578 <system_init_flash+0x8c>)
  400540:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400542:	bf94      	ite	ls
  400544:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400548:	4b0c      	ldrhi	r3, [pc, #48]	; (40057c <system_init_flash+0x90>)
  40054a:	4a04      	ldr	r2, [pc, #16]	; (40055c <system_init_flash+0x70>)
  40054c:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40054e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400552:	6013      	str	r3, [r2, #0]
  400554:	4770      	bx	lr
  400556:	bf00      	nop
  400558:	01312cff 	.word	0x01312cff
  40055c:	400e0a00 	.word	0x400e0a00
  400560:	026259ff 	.word	0x026259ff
  400564:	04000100 	.word	0x04000100
  400568:	039386ff 	.word	0x039386ff
  40056c:	04000200 	.word	0x04000200
  400570:	04c4b3ff 	.word	0x04c4b3ff
  400574:	04000300 	.word	0x04000300
  400578:	05f5e0ff 	.word	0x05f5e0ff
  40057c:	04000500 	.word	0x04000500

00400580 <_pio_set_output>:
#include "pio_maua.h"


void _pio_set_output(Pio *p_pio, const uint32_t ul_mask, const uint32_t ul_default_level, const uint32_t ul_pull_up_enable) //?
{
	p_pio->PIO_WPMR = ul_mask;
  400580:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
	
	if(ul_default_level)
  400584:	b10a      	cbz	r2, 40058a <_pio_set_output+0xa>
}


void _pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400586:	6301      	str	r1, [r0, #48]	; 0x30
  400588:	e000      	b.n	40058c <_pio_set_output+0xc>
}


void _pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40058a:	6341      	str	r1, [r0, #52]	; 0x34
}


void _pio_pull_up(Pio *p_pio, const uint32_t ul_mask, const uint32_t ul_pull_up_enable) //?
{
	if(ul_pull_up_enable)
  40058c:	b10b      	cbz	r3, 400592 <_pio_set_output+0x12>
		p_pio->PIO_PUER = ul_mask;	//liga pull up
  40058e:	6641      	str	r1, [r0, #100]	; 0x64
  400590:	e000      	b.n	400594 <_pio_set_output+0x14>
	else
		p_pio->PIO_PUDR = ul_mask;	//DESLIGA pull up
  400592:	6601      	str	r1, [r0, #96]	; 0x60
	else
		_pio_clear(p_pio, ul_mask);
		
	_pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
	
	p_pio->PIO_OER = ul_mask;
  400594:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400596:	6001      	str	r1, [r0, #0]
  400598:	4770      	bx	lr
  40059a:	bf00      	nop

0040059c <_pio_set_input>:


void _pio_set_input(Pio *p_pio, const uint32_t ul_mask, const uint32_t ul_attribute) 
{
	
	if(ul_attribute & PIO_PULLUP)
  40059c:	f012 0f01 	tst.w	r2, #1


void _pio_pull_up(Pio *p_pio, const uint32_t ul_mask, const uint32_t ul_pull_up_enable) //?
{
	if(ul_pull_up_enable)
		p_pio->PIO_PUER = ul_mask;	//liga pull up
  4005a0:	bf18      	it	ne
  4005a2:	6641      	strne	r1, [r0, #100]	; 0x64
{
	
	if(ul_attribute & PIO_PULLUP)
		_pio_pull_up(p_pio, ul_mask, 1);
		
	if(ul_attribute & PIO_DEGLITCH){
  4005a4:	f012 0f02 	tst.w	r2, #2
		p_pio->PIO_IFER   = ul_mask;
  4005a8:	bf1c      	itt	ne
  4005aa:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFSCDR = ul_mask;
  4005ac:	f8c0 1080 	strne.w	r1, [r0, #128]	; 0x80
	}
	
	if(ul_attribute & PIO_DEBOUNCE){
  4005b0:	f012 0f08 	tst.w	r2, #8
		p_pio->PIO_IFER   = ul_mask;
  4005b4:	bf1c      	itt	ne
  4005b6:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFSCER = ul_mask;	
  4005b8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	}
		
	p_pio->PIO_ODR = ul_mask;
  4005bc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4005be:	6001      	str	r1, [r0, #0]
  4005c0:	4770      	bx	lr
  4005c2:	bf00      	nop

004005c4 <_pio_set>:
}


void _pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4005c4:	6301      	str	r1, [r0, #48]	; 0x30
  4005c6:	4770      	bx	lr

004005c8 <_pio_clear>:
}


void _pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4005c8:	6341      	str	r1, [r0, #52]	; 0x34
  4005ca:	4770      	bx	lr

004005cc <_pio_get_output_data_status>:
}


uint32_t _pio_get_output_data_status(const Pio *p_pio, const uint32_t ul_mask) 
{
	if(p_pio->PIO_PDSR & ul_mask)
  4005cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  4005ce:	4219      	tst	r1, r3
		return(1);
	return(0);
	
  4005d0:	bf14      	ite	ne
  4005d2:	2001      	movne	r0, #1
  4005d4:	2000      	moveq	r0, #0
  4005d6:	4770      	bx	lr

004005d8 <_pmc_enable_clock_periferico>:
     * os clocks dos perifericos, é necessário testarmos
     * antes para saber em qual deve ser salvo.
     *
     * O ID máximo para o PMC_PCER0 é 32
     */
    if(ID< 32){
  4005d8:	281f      	cmp	r0, #31
        PMC->PMC_PCER0 = (1 << ID);
  4005da:	f04f 0301 	mov.w	r3, #1
  4005de:	fa03 f300 	lsl.w	r3, r3, r0
  4005e2:	4a03      	ldr	r2, [pc, #12]	; (4005f0 <_pmc_enable_clock_periferico+0x18>)
  4005e4:	bf94      	ite	ls
  4005e6:	6113      	strls	r3, [r2, #16]
    }
    else{
        PMC->PMC_PCER1 = (1 << ID);
  4005e8:	f8c2 3100 	strhi.w	r3, [r2, #256]	; 0x100

    /**
     * @brief qual seria a situação que retornariamos 1 ?
     */
    return(0);
}
  4005ec:	2000      	movs	r0, #0
  4005ee:	4770      	bx	lr
  4005f0:	400e0400 	.word	0x400e0400

004005f4 <main>:
 * 6. ativa a o pino como modo output
 * 7. coloca o HIGH no pino
 */

int main (void)
{
  4005f4:	b580      	push	{r7, lr}
	/************************************************************************/
	/* Config uC                                                            */
	/************************************************************************/
	//Inicializando o clock do uP
	sysclk_init();
  4005f6:	4b23      	ldr	r3, [pc, #140]	; (400684 <main+0x90>)
  4005f8:	4798      	blx	r3
	
	//Desabilitando o WathDog do uP
	WDT->WDT_MR = WDT_MR_WDDIS;
  4005fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4005fe:	4b22      	ldr	r3, [pc, #136]	; (400688 <main+0x94>)
  400600:	605a      	str	r2, [r3, #4]
 
	_pmc_enable_clock_periferico(ID_PIOA);
  400602:	200b      	movs	r0, #11
  400604:	4c21      	ldr	r4, [pc, #132]	; (40068c <main+0x98>)
  400606:	47a0      	blx	r4
	_pmc_enable_clock_periferico(ID_PIOB);
  400608:	200c      	movs	r0, #12
  40060a:	47a0      	blx	r4
	_pmc_enable_clock_periferico(ID_PIOC);
  40060c:	200d      	movs	r0, #13
  40060e:	47a0      	blx	r4
	
	/************************************************************************/
	/* Config leds otput                                                    */
	/************************************************************************/
	_pio_set_output(PIOA, (1 << PIN_LED_BLUE ) | (1 << PIN_LED_GREEN ), 0, 0);
  400610:	481f      	ldr	r0, [pc, #124]	; (400690 <main+0x9c>)
  400612:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
  400616:	2200      	movs	r2, #0
  400618:	4613      	mov	r3, r2
  40061a:	4c1e      	ldr	r4, [pc, #120]	; (400694 <main+0xa0>)
  40061c:	47a0      	blx	r4
	_pio_set_output(PIOC, 1 << PIN_LED_RED, 1, 0);
  40061e:	481e      	ldr	r0, [pc, #120]	; (400698 <main+0xa4>)
  400620:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  400624:	2201      	movs	r2, #1
  400626:	2300      	movs	r3, #0
  400628:	47a0      	blx	r4

	/************************************************************************/
	/* Config botao input                                                   */
	/************************************************************************/
	_pio_set_input(PIOB, 1 << PIN_BOTAO, PIO_PULLUP | PIO_DEBOUNCE);
  40062a:	481c      	ldr	r0, [pc, #112]	; (40069c <main+0xa8>)
  40062c:	2108      	movs	r1, #8
  40062e:	2209      	movs	r2, #9
  400630:	4b1b      	ldr	r3, [pc, #108]	; (4006a0 <main+0xac>)
  400632:	4798      	blx	r3
	/**
	*	Loop infinito
	*/
	while(1){
		
		if (!(_pio_get_output_data_status(PIOB, 1<<PIN_BOTAO)))
  400634:	4e1b      	ldr	r6, [pc, #108]	; (4006a4 <main+0xb0>)
  400636:	4d19      	ldr	r5, [pc, #100]	; (40069c <main+0xa8>)
		{		
			//Turn on
			_pio_set(PIOA, (1<<PIN_LED_BLUE | 1<<PIN_LED_GREEN));
  400638:	f8df 9054 	ldr.w	r9, [pc, #84]	; 400690 <main+0x9c>
			_pio_clear(PIOC, (1 <<PIN_LED_RED));
  40063c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400698 <main+0xa4>
			delay_ms(1000);
  400640:	4f19      	ldr	r7, [pc, #100]	; (4006a8 <main+0xb4>)
	/**
	*	Loop infinito
	*/
	while(1){
		
		if (!(_pio_get_output_data_status(PIOB, 1<<PIN_BOTAO)))
  400642:	2408      	movs	r4, #8
  400644:	4628      	mov	r0, r5
  400646:	4621      	mov	r1, r4
  400648:	47b0      	blx	r6
  40064a:	2800      	cmp	r0, #0
  40064c:	d1fa      	bne.n	400644 <main+0x50>
		{		
			//Turn on
			_pio_set(PIOA, (1<<PIN_LED_BLUE | 1<<PIN_LED_GREEN));
  40064e:	4648      	mov	r0, r9
  400650:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
  400654:	4b15      	ldr	r3, [pc, #84]	; (4006ac <main+0xb8>)
  400656:	4798      	blx	r3
			_pio_clear(PIOC, (1 <<PIN_LED_RED));
  400658:	4640      	mov	r0, r8
  40065a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40065e:	4b14      	ldr	r3, [pc, #80]	; (4006b0 <main+0xbc>)
  400660:	4798      	blx	r3
			delay_ms(1000);
  400662:	4638      	mov	r0, r7
  400664:	4c13      	ldr	r4, [pc, #76]	; (4006b4 <main+0xc0>)
  400666:	47a0      	blx	r4
			//Turn off
			_pio_set(PIOC, (1 <<PIN_LED_RED));
  400668:	4640      	mov	r0, r8
  40066a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  40066e:	4b0f      	ldr	r3, [pc, #60]	; (4006ac <main+0xb8>)
  400670:	4798      	blx	r3
			_pio_clear(PIOA, (1<<PIN_LED_BLUE | 1<<PIN_LED_GREEN));
  400672:	4648      	mov	r0, r9
  400674:	f44f 11c0 	mov.w	r1, #1572864	; 0x180000
  400678:	4b0d      	ldr	r3, [pc, #52]	; (4006b0 <main+0xbc>)
  40067a:	4798      	blx	r3
			delay_ms(1000);
  40067c:	4638      	mov	r0, r7
  40067e:	47a0      	blx	r4
  400680:	e7df      	b.n	400642 <main+0x4e>
  400682:	bf00      	nop
  400684:	00400129 	.word	0x00400129
  400688:	400e1450 	.word	0x400e1450
  40068c:	004005d9 	.word	0x004005d9
  400690:	400e0e00 	.word	0x400e0e00
  400694:	00400581 	.word	0x00400581
  400698:	400e1200 	.word	0x400e1200
  40069c:	400e1000 	.word	0x400e1000
  4006a0:	0040059d 	.word	0x0040059d
  4006a4:	004005cd 	.word	0x004005cd
  4006a8:	0082ca25 	.word	0x0082ca25
  4006ac:	004005c5 	.word	0x004005c5
  4006b0:	004005c9 	.word	0x004005c9
  4006b4:	20000001 	.word	0x20000001

004006b8 <__libc_init_array>:
  4006b8:	b570      	push	{r4, r5, r6, lr}
  4006ba:	4e0f      	ldr	r6, [pc, #60]	; (4006f8 <__libc_init_array+0x40>)
  4006bc:	4d0f      	ldr	r5, [pc, #60]	; (4006fc <__libc_init_array+0x44>)
  4006be:	1b76      	subs	r6, r6, r5
  4006c0:	10b6      	asrs	r6, r6, #2
  4006c2:	bf18      	it	ne
  4006c4:	2400      	movne	r4, #0
  4006c6:	d005      	beq.n	4006d4 <__libc_init_array+0x1c>
  4006c8:	3401      	adds	r4, #1
  4006ca:	f855 3b04 	ldr.w	r3, [r5], #4
  4006ce:	4798      	blx	r3
  4006d0:	42a6      	cmp	r6, r4
  4006d2:	d1f9      	bne.n	4006c8 <__libc_init_array+0x10>
  4006d4:	4e0a      	ldr	r6, [pc, #40]	; (400700 <__libc_init_array+0x48>)
  4006d6:	4d0b      	ldr	r5, [pc, #44]	; (400704 <__libc_init_array+0x4c>)
  4006d8:	1b76      	subs	r6, r6, r5
  4006da:	f000 f891 	bl	400800 <_init>
  4006de:	10b6      	asrs	r6, r6, #2
  4006e0:	bf18      	it	ne
  4006e2:	2400      	movne	r4, #0
  4006e4:	d006      	beq.n	4006f4 <__libc_init_array+0x3c>
  4006e6:	3401      	adds	r4, #1
  4006e8:	f855 3b04 	ldr.w	r3, [r5], #4
  4006ec:	4798      	blx	r3
  4006ee:	42a6      	cmp	r6, r4
  4006f0:	d1f9      	bne.n	4006e6 <__libc_init_array+0x2e>
  4006f2:	bd70      	pop	{r4, r5, r6, pc}
  4006f4:	bd70      	pop	{r4, r5, r6, pc}
  4006f6:	bf00      	nop
  4006f8:	0040080c 	.word	0x0040080c
  4006fc:	0040080c 	.word	0x0040080c
  400700:	00400814 	.word	0x00400814
  400704:	0040080c 	.word	0x0040080c

00400708 <register_fini>:
  400708:	4b02      	ldr	r3, [pc, #8]	; (400714 <register_fini+0xc>)
  40070a:	b113      	cbz	r3, 400712 <register_fini+0xa>
  40070c:	4802      	ldr	r0, [pc, #8]	; (400718 <register_fini+0x10>)
  40070e:	f000 b805 	b.w	40071c <atexit>
  400712:	4770      	bx	lr
  400714:	00000000 	.word	0x00000000
  400718:	00400729 	.word	0x00400729

0040071c <atexit>:
  40071c:	4601      	mov	r1, r0
  40071e:	2000      	movs	r0, #0
  400720:	4602      	mov	r2, r0
  400722:	4603      	mov	r3, r0
  400724:	f000 b816 	b.w	400754 <__register_exitproc>

00400728 <__libc_fini_array>:
  400728:	b538      	push	{r3, r4, r5, lr}
  40072a:	4b08      	ldr	r3, [pc, #32]	; (40074c <__libc_fini_array+0x24>)
  40072c:	4d08      	ldr	r5, [pc, #32]	; (400750 <__libc_fini_array+0x28>)
  40072e:	1aed      	subs	r5, r5, r3
  400730:	10ac      	asrs	r4, r5, #2
  400732:	bf18      	it	ne
  400734:	18ed      	addne	r5, r5, r3
  400736:	d005      	beq.n	400744 <__libc_fini_array+0x1c>
  400738:	3c01      	subs	r4, #1
  40073a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40073e:	4798      	blx	r3
  400740:	2c00      	cmp	r4, #0
  400742:	d1f9      	bne.n	400738 <__libc_fini_array+0x10>
  400744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400748:	f000 b864 	b.w	400814 <_fini>
  40074c:	00400820 	.word	0x00400820
  400750:	00400824 	.word	0x00400824

00400754 <__register_exitproc>:
  400754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400758:	4c25      	ldr	r4, [pc, #148]	; (4007f0 <__register_exitproc+0x9c>)
  40075a:	6825      	ldr	r5, [r4, #0]
  40075c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400760:	4606      	mov	r6, r0
  400762:	4688      	mov	r8, r1
  400764:	4692      	mov	sl, r2
  400766:	4699      	mov	r9, r3
  400768:	b3cc      	cbz	r4, 4007de <__register_exitproc+0x8a>
  40076a:	6860      	ldr	r0, [r4, #4]
  40076c:	281f      	cmp	r0, #31
  40076e:	dc18      	bgt.n	4007a2 <__register_exitproc+0x4e>
  400770:	1c43      	adds	r3, r0, #1
  400772:	b17e      	cbz	r6, 400794 <__register_exitproc+0x40>
  400774:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400778:	2101      	movs	r1, #1
  40077a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40077e:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  400782:	fa01 f200 	lsl.w	r2, r1, r0
  400786:	4317      	orrs	r7, r2
  400788:	2e02      	cmp	r6, #2
  40078a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40078e:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400792:	d01e      	beq.n	4007d2 <__register_exitproc+0x7e>
  400794:	3002      	adds	r0, #2
  400796:	6063      	str	r3, [r4, #4]
  400798:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40079c:	2000      	movs	r0, #0
  40079e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4007a2:	4b14      	ldr	r3, [pc, #80]	; (4007f4 <__register_exitproc+0xa0>)
  4007a4:	b303      	cbz	r3, 4007e8 <__register_exitproc+0x94>
  4007a6:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4007aa:	f3af 8000 	nop.w
  4007ae:	4604      	mov	r4, r0
  4007b0:	b1d0      	cbz	r0, 4007e8 <__register_exitproc+0x94>
  4007b2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4007b6:	2700      	movs	r7, #0
  4007b8:	e880 0088 	stmia.w	r0, {r3, r7}
  4007bc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4007c0:	4638      	mov	r0, r7
  4007c2:	2301      	movs	r3, #1
  4007c4:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4007c8:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4007cc:	2e00      	cmp	r6, #0
  4007ce:	d0e1      	beq.n	400794 <__register_exitproc+0x40>
  4007d0:	e7d0      	b.n	400774 <__register_exitproc+0x20>
  4007d2:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4007d6:	430a      	orrs	r2, r1
  4007d8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4007dc:	e7da      	b.n	400794 <__register_exitproc+0x40>
  4007de:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4007e2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4007e6:	e7c0      	b.n	40076a <__register_exitproc+0x16>
  4007e8:	f04f 30ff 	mov.w	r0, #4294967295
  4007ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4007f0:	004007fc 	.word	0x004007fc
  4007f4:	00000000 	.word	0x00000000
  4007f8:	00000043 	.word	0x00000043

004007fc <_global_impure_ptr>:
  4007fc:	20000010                                ... 

00400800 <_init>:
  400800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400802:	bf00      	nop
  400804:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400806:	bc08      	pop	{r3}
  400808:	469e      	mov	lr, r3
  40080a:	4770      	bx	lr

0040080c <__init_array_start>:
  40080c:	00400709 	.word	0x00400709

00400810 <__frame_dummy_init_array_entry>:
  400810:	004000f1                                ..@.

00400814 <_fini>:
  400814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400816:	bf00      	nop
  400818:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40081a:	bc08      	pop	{r3}
  40081c:	469e      	mov	lr, r3
  40081e:	4770      	bx	lr

00400820 <__fini_array_start>:
  400820:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
20000044:	07f8 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
